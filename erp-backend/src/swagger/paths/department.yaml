paths:
  /hrm/departments:
    get:
      tags: [Departments]
      summary: Get all departments
      description: Retrieve a list of all departments
      security:
        - bearerAuth: []
      responses:
        200:
          description: List of departments retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DepartmentListResponse'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          description: Not authorized to view departments
    post:
      tags: [Departments]
      summary: Create new department
      description: Create a new department in the organization
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Department'
      responses:
        201:
          description: Department created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DepartmentResponse'
        400:
          description: Invalid input data
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          description: Not authorized to create departments

  /hrm/departments/{id}:
    get:
      tags: [Departments]
      summary: Get department by ID
      description: Retrieve detailed information about a specific department
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Department ID
      responses:
        200:
          description: Department retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DepartmentResponse'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
    put:
      tags: [Departments]
      summary: Update department
      description: Update an existing department's information
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Department ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Department'
      responses:
        200:
          description: Department updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DepartmentResponse'
        400:
          description: Invalid input data
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
    delete:
      tags: [Departments]
      summary: Delete department
      description: Delete a department (soft delete)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Department ID
      responses:
        200:
          description: Department deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Department deleted successfully
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError' 